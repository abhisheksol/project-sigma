"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import datetime
import logging
import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Logger settings
logger = logging.getLogger(__name__)
syslog = logging.StreamHandler()
formatter = logging.Formatter(
    "INFO => AT: %(asctime)s API/FUNC: %(app_name)s MSG: %(message)s"
)
syslog.setFormatter(formatter)
logger.addHandler(syslog)

logging.basicConfig(filename="app.log")
logger.setLevel(logging.DEBUG)
# Application definition

CUSTOM_APPS = [
    # Add Custom Apps used in project
    "user_config",
    "core_utils",
    "core_utils.region_data",
    "core_utils.media_storage",
    "user_config.accounts",
    "user_config.user_auth",
    "user_config.permissions",
    "store",
    "store.configurations",
    "store.configurations.loan_config",
    "store.configurations.region_config",
    "core_utils.activity_monitoring",
    "core_utils.manage_columns",
    "store.operations",
    "store.operations.allocation_files",
    "store.operations.case_management",
    "store.operations.referal_files",
    "store.configurations.loan_config.template_config",
    "store.timepass",
]

THIRD_PARTY_APPS = [
    # Add Third Party Apps installed
    "rest_framework",
    "corsheaders",
    "rest_framework_jwt",
    "django_filters",
    "django_user_agents",
    "drf_yasg",
    "daphne",
    "channels",
]

CORS_ALLOW_ALL_ORIGINS = True
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    *CUSTOM_APPS,
    *THIRD_PARTY_APPS,
    # ? this is place at last because Daphne must be listed before django.contrib.staticfiles in INSTALLED_APPS
    "django.contrib.staticfiles",
]

AUTH_USER_MODEL = "user_auth.UserModel"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


ASGI_APPLICATION = "core.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
if config("DB_TYPE", "POSTGRES") == "POSTGRES":
    DATABASES = {
        "default": {
            "ENGINE": config("ENGINE"),
            "NAME": config("DB_NAME"),
            "USER": config("DB_USER"),
            "PASSWORD": config("DB_PASSWORD"),
            "HOST": config("DB_HOST"),
            "PORT": config("DB_PORT"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# ? Rest Framework settings
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.FormParser",
    ),
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        # "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10,
}

# ? Jwt settings
JWT_AUTH = {
    "JWT_ENCODE_HANDLER": "rest_framework_jwt.utils.jwt_encode_payload",
    "JWT_DECODE_HANDLER": "rest_framework_jwt.utils.jwt_decode_token",
    "JWT_PAYLOAD_HANDLER": "rest_framework_jwt.utils.jwt_create_payload",
    "JWT_PAYLOAD_GET_USERNAME_HANDLER": "rest_framework_jwt.utils.jwt_get_username_from_payload_handler",
    "JWT_PAYLOAD_GET_USER_ID_HANDLER": "rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler",
    "JWT_RESPONSE_PAYLOAD_HANDLER": "user_config.user_auth.api.v1.utils.authentication.jwt_response_payload_handler_utils.jwt_response_payload_handler",
    "JWT_SECRET_KEY": SECRET_KEY,
    "JWT_GET_USER_SECRET_KEY": None,
    "JWT_PUBLIC_KEY": None,
    "JWT_PRIVATE_KEY": None,
    "JWT_ALGORITHM": "HS256",
    "JWT_VERIFY": True,
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_LEEWAY": 0,
    "JWT_EXPIRATION_DELTA": datetime.timedelta(days=30),
    "JWT_AUDIENCE": None,
    "JWT_ISSUER": None,
    "BLACKLIST_AFTER_ROTATION": True,
    "JWT_ALLOW_REFRESH": False,
    "JWT_REFRESH_EXPIRATION_DELTA": datetime.timedelta(days=30),
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
    "JWT_AUTH_COOKIE": None,
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

MEDIA_PATH = "media/"
MEDIA_URL = "media_bidPlan/"
MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_PATH)

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ? core utils variables
AUTO_REGISTER_MODELS = True
AUTO_REGISTER_MODEL_APPS = []

DISABLE_MULTI_LOGIN = True

STATIC_ROOT = BASE_DIR / "static"

# * .env variables

BACKEND_URL = config("BACKEND_URL")
OS_MAX_FILE_NAME_LENGTH = config("OS_MAX_FILE_NAME_LENGTH")


SMTP_SERVER = config("SMTP_SERVER")
SMTP_PORT = config("SMTP_PORT")
SMTP_SENDER_EMAIL = config("SMTP_SENDER_EMAIL")
SMTP_PASSWORD = config("SMTP_PASSWORD")
SMTP_EMAIL_HOST = config("SMTP_EMAIL_HOST")

FRONTEND_URL = config("FRONTEND_URL")

PROJECT_NAME = config("PROJECT_NAME")

PROJECT_LOGO = config("PROJECT_LOGO")

PROJECT_COMPANY_URL = config("PROJECT_COMPANY_URL")
E2E_ACCESS_KEY = config("E2E_ACCESS_KEY")
E2E_SECRET_KEY = config("E2E_SECRET_KEY")
E2E_BUCKET_NAME = config("E2E_BUCKET_NAME")
E2E_ENDPOINT = config("E2E_ENDPOINT")
